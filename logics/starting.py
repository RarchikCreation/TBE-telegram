from aiogram import types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove

from handlers.database.management import has_user_submitted, add_user_to_submitted
from handlers.lead.bot_instance import bot, dp
from logics.file.directories import mentors_info
from settings.config import CHANNEL_ID, GROUP_ID

class Survey(StatesGroup):
    age = State()
    project_source = State()
    work_time = State()
    experience = State()
    mentor_selection = State()
    need_curator = State()


async def check_subscription(user_id):
    member = await bot.get_chat_member(CHANNEL_ID, user_id)
    return member.status in ['member', 'administrator', 'creator']


@dp.message(F.text.lower() == "/start")
async def start_handler(message: types.Message):
    user_id = message.from_user.id
    if has_user_submitted(user_id):
        await message.answer("–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∞–Ω–∫–µ—Ç—É –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –µ—ë –ø–æ–≤—Ç–æ—Ä–Ω–æ.")
        return
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîó –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url="https://t.me/tbe_news")],
        [InlineKeyboardButton(text="‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="subscribed")]
    ])
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.", reply_markup=keyboard)

@dp.callback_query(F.data == "subscribed")
async def subscribed_callback(callback: types.CallbackQuery, state: FSMContext):
    if await check_subscription(callback.from_user.id):
        await callback.message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –¢–µ–ø–µ—Ä—å –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤.")
        await state.set_state(Survey.age)
        await callback.message.answer("–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç?")
    else:
        await callback.answer("‚ùå –í—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã! –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)



def mentor_keyboard():
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="KARTI", callback_data="choose_mentor_karti")],
            [InlineKeyboardButton(text="IMPO$$IBLE", callback_data="choose_mentor_impossible")],
            [InlineKeyboardButton(text="mdma", callback_data="choose_mentor_mdma")],
            [InlineKeyboardButton(text="sedrick", callback_data="choose_mentor_sedrick")]
        ]
    )
    return keyboard


@dp.callback_query(F.data.startswith("info_mentor_"))
async def mentor_info(callback: types.CallbackQuery):
    mentor_key = callback.data.split("_")[-1]
    mentor_text, mentor_photos = mentors_info.get(mentor_key, ("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç", []))

    await callback.message.answer(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–µ {mentor_key}:\n\n{mentor_text}")

    for photo in mentor_photos:
        await bot.send_photo(callback.from_user.id, photo=types.FSInputFile(photo))


@dp.message(Survey.mentor_selection)
async def process_mentor_selection(message: types.Message, state: FSMContext):
    chosen_mentor = message.text.strip().lower()

    if chosen_mentor in ["karti", "impo$$ible", "mdma", "sedrick"]:
        await state.update_data(mentor=chosen_mentor)
        await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞: {chosen_mentor}")

        await send_survey(message.from_user.id, state)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞!")


async def send_survey(user_id: int, state: FSMContext):
    user_data = await state.get_data()

    user = await bot.get_chat(user_id)
    full_name = user.full_name or "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"
    username = f"@{user.username}" if user.username else "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"

    survey_text = (
        f"–ê–Ω–∫–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {full_name}\n"
        f"ID: {user_id}\n"
        f"–Æ–∑–µ—Ä–Ω–µ–π–º: {username}\n"
        f"–í–æ–∑—Ä–∞—Å—Ç: {user_data['age']}\n"
        f"–ò—Å—Ç–æ—á–Ω–∏–∫: {user_data['project_source']}\n"
        f"–í—Ä–µ–º—è –Ω–∞ —Ä–∞–±–æ—Ç—É: {user_data['work_time']}\n"
        f"–û–ø—ã—Ç: {user_data['experience']}\n"
        f"–ù–∞—Å—Ç–∞–≤–Ω–∏–∫: {user_data.get('mentor', '–Ω–µ –≤—ã–±—Ä–∞–Ω')}"
    )

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="–ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_{user_id}"),
                InlineKeyboardButton(text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"decline_{user_id}")
            ]
        ]
    )

    await bot.send_message(GROUP_ID, survey_text, reply_markup=keyboard)
    add_user_to_submitted(user_id)
    await bot.send_message(user_id, "–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.", reply_markup=ReplyKeyboardRemove())
    await state.clear()

